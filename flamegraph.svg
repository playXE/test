<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>libimmixcons`immix_mutator_yieldpoint (1 samples, 0.07%)</title><rect x="0.0000%" y="277" width="0.0689%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="287.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (1 samples, 0.07%)</title><rect x="0.0689%" y="277" width="0.0689%" height="15" fill="rgb(217,0,24)"/><text x="0.3189%" y="287.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (1 samples, 0.07%)</title><rect x="0.0689%" y="261" width="0.0689%" height="15" fill="rgb(221,193,54)"/><text x="0.3189%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (2 samples, 0.14%)</title><rect x="0.1377%" y="229" width="0.1377%" height="15" fill="rgb(248,212,6)"/><text x="0.3877%" y="239.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (1 samples, 0.07%)</title><rect x="0.2755%" y="213" width="0.0689%" height="15" fill="rgb(208,68,35)"/><text x="0.5255%" y="223.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (1 samples, 0.07%)</title><rect x="0.3444%" y="197" width="0.0689%" height="15" fill="rgb(232,128,0)"/><text x="0.5944%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="0.4821%" y="181" width="0.1377%" height="15" fill="rgb(207,160,47)"/><text x="0.7321%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="0.6198%" y="165" width="0.0689%" height="15" fill="rgb(228,23,34)"/><text x="0.8698%" y="175.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (2 samples, 0.14%)</title><rect x="0.6887%" y="165" width="0.1377%" height="15" fill="rgb(218,30,26)"/><text x="0.9387%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (13 samples, 0.90%)</title><rect x="0.0000%" y="341" width="0.8953%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="351.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (13 samples, 0.90%)</title><rect x="0.0000%" y="325" width="0.8953%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="335.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (13 samples, 0.90%)</title><rect x="0.0000%" y="309" width="0.8953%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="319.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (13 samples, 0.90%)</title><rect x="0.0000%" y="293" width="0.8953%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="303.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (11 samples, 0.76%)</title><rect x="0.1377%" y="277" width="0.7576%" height="15" fill="rgb(206,188,39)"/><text x="0.3877%" y="287.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (11 samples, 0.76%)</title><rect x="0.1377%" y="261" width="0.7576%" height="15" fill="rgb(217,207,13)"/><text x="0.3877%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (11 samples, 0.76%)</title><rect x="0.1377%" y="245" width="0.7576%" height="15" fill="rgb(231,73,38)"/><text x="0.3877%" y="255.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (9 samples, 0.62%)</title><rect x="0.2755%" y="229" width="0.6198%" height="15" fill="rgb(225,20,46)"/><text x="0.5255%" y="239.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (8 samples, 0.55%)</title><rect x="0.3444%" y="213" width="0.5510%" height="15" fill="rgb(210,31,41)"/><text x="0.5944%" y="223.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (7 samples, 0.48%)</title><rect x="0.4132%" y="197" width="0.4821%" height="15" fill="rgb(221,200,47)"/><text x="0.6632%" y="207.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (4 samples, 0.28%)</title><rect x="0.6198%" y="181" width="0.2755%" height="15" fill="rgb(226,26,5)"/><text x="0.8698%" y="191.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (1 samples, 0.07%)</title><rect x="0.8264%" y="165" width="0.0689%" height="15" fill="rgb(249,33,26)"/><text x="1.0764%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (1 samples, 0.07%)</title><rect x="0.8264%" y="149" width="0.0689%" height="15" fill="rgb(235,183,28)"/><text x="1.0764%" y="159.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (1 samples, 0.07%)</title><rect x="0.8264%" y="133" width="0.0689%" height="15" fill="rgb(221,5,38)"/><text x="1.0764%" y="143.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="0.8953%" y="325" width="0.0689%" height="15" fill="rgb(247,18,42)"/><text x="1.1453%" y="335.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (1 samples, 0.07%)</title><rect x="0.9642%" y="325" width="0.0689%" height="15" fill="rgb(241,131,45)"/><text x="1.2142%" y="335.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (3 samples, 0.21%)</title><rect x="1.0331%" y="325" width="0.2066%" height="15" fill="rgb(249,31,29)"/><text x="1.2831%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="1.1708%" y="309" width="0.0689%" height="15" fill="rgb(225,111,53)"/><text x="1.4208%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="1.3085%" y="309" width="0.0689%" height="15" fill="rgb(238,160,17)"/><text x="1.5585%" y="319.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (1 samples, 0.07%)</title><rect x="1.3774%" y="309" width="0.0689%" height="15" fill="rgb(214,148,48)"/><text x="1.6274%" y="319.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (3 samples, 0.21%)</title><rect x="1.5152%" y="293" width="0.2066%" height="15" fill="rgb(232,36,49)"/><text x="1.7652%" y="303.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (4 samples, 0.28%)</title><rect x="1.7218%" y="293" width="0.2755%" height="15" fill="rgb(209,103,24)"/><text x="1.9718%" y="303.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (2 samples, 0.14%)</title><rect x="1.8595%" y="277" width="0.1377%" height="15" fill="rgb(229,88,8)"/><text x="2.1095%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.28%)</title><rect x="2.0661%" y="277" width="0.2755%" height="15" fill="rgb(213,181,19)"/><text x="2.3161%" y="287.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (6 samples, 0.41%)</title><rect x="2.3416%" y="277" width="0.4132%" height="15" fill="rgb(254,191,54)"/><text x="2.5916%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="3.0303%" y="261" width="0.1377%" height="15" fill="rgb(241,83,37)"/><text x="3.2803%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (8 samples, 0.55%)</title><rect x="2.7548%" y="277" width="0.5510%" height="15" fill="rgb(233,36,39)"/><text x="3.0048%" y="287.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (2 samples, 0.14%)</title><rect x="3.1680%" y="261" width="0.1377%" height="15" fill="rgb(226,3,54)"/><text x="3.4180%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="3.3058%" y="261" width="0.1377%" height="15" fill="rgb(245,192,40)"/><text x="3.5558%" y="271.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="3.4435%" y="261" width="0.0689%" height="15" fill="rgb(238,167,29)"/><text x="3.6935%" y="271.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (9 samples, 0.62%)</title><rect x="3.5124%" y="261" width="0.6198%" height="15" fill="rgb(232,182,51)"/><text x="3.7624%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (24 samples, 1.65%)</title><rect x="4.1322%" y="261" width="1.6529%" height="15" fill="rgb(231,60,39)"/><text x="4.3822%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (8 samples, 0.55%)</title><rect x="5.2342%" y="245" width="0.5510%" height="15" fill="rgb(208,69,12)"/><text x="5.4842%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.14%)</title><rect x="5.6474%" y="229" width="0.1377%" height="15" fill="rgb(235,93,37)"/><text x="5.8974%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="6.4050%" y="245" width="0.1377%" height="15" fill="rgb(213,116,39)"/><text x="6.6550%" y="255.50"></text></g><g><title>libimmixcons`immix_alloc (2 samples, 0.14%)</title><rect x="6.5427%" y="245" width="0.1377%" height="15" fill="rgb(222,207,29)"/><text x="6.7927%" y="255.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (23 samples, 1.58%)</title><rect x="6.6804%" y="245" width="1.5840%" height="15" fill="rgb(206,96,30)"/><text x="6.9304%" y="255.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="9.7107%" y="229" width="0.2066%" height="15" fill="rgb(218,138,4)"/><text x="9.9607%" y="239.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (35 samples, 2.41%)</title><rect x="8.2645%" y="245" width="2.4105%" height="15" fill="rgb(250,191,14)"/><text x="8.5145%" y="255.50">li..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (11 samples, 0.76%)</title><rect x="9.9174%" y="229" width="0.7576%" height="15" fill="rgb(239,60,40)"/><text x="10.1674%" y="239.50"></text></g><g><title>libimmixcons`libimmixcons::util::locks::mutex::ReentrantMutex::unlock (1 samples, 0.07%)</title><rect x="10.6061%" y="213" width="0.0689%" height="15" fill="rgb(206,27,48)"/><text x="10.8561%" y="223.50"></text></g><g><title>libimmixcons`atomic::fallback::SpinLock::lock (1 samples, 0.07%)</title><rect x="10.6061%" y="197" width="0.0689%" height="15" fill="rgb(225,35,8)"/><text x="10.8561%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="10.9504%" y="229" width="0.2066%" height="15" fill="rgb(250,213,24)"/><text x="11.2004%" y="239.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="11.1570%" y="229" width="0.0689%" height="15" fill="rgb(247,123,22)"/><text x="11.4070%" y="239.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (16 samples, 1.10%)</title><rect x="11.2259%" y="229" width="1.1019%" height="15" fill="rgb(231,138,38)"/><text x="11.4759%" y="239.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (14 samples, 0.96%)</title><rect x="12.3278%" y="229" width="0.9642%" height="15" fill="rgb(231,145,46)"/><text x="12.5778%" y="239.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (5 samples, 0.34%)</title><rect x="12.9477%" y="213" width="0.3444%" height="15" fill="rgb(251,118,11)"/><text x="13.1977%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.07%)</title><rect x="13.2231%" y="197" width="0.0689%" height="15" fill="rgb(217,147,25)"/><text x="13.4731%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="13.6364%" y="213" width="0.1377%" height="15" fill="rgb(247,81,37)"/><text x="13.8864%" y="223.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="13.7741%" y="213" width="0.0689%" height="15" fill="rgb(209,12,38)"/><text x="14.0241%" y="223.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (10 samples, 0.69%)</title><rect x="13.8430%" y="213" width="0.6887%" height="15" fill="rgb(227,1,9)"/><text x="14.0930%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="16.0468%" y="197" width="0.0689%" height="15" fill="rgb(248,47,43)"/><text x="16.2968%" y="207.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (36 samples, 2.48%)</title><rect x="14.5317%" y="213" width="2.4793%" height="15" fill="rgb(221,10,30)"/><text x="14.7817%" y="223.50">li..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (13 samples, 0.90%)</title><rect x="16.1157%" y="197" width="0.8953%" height="15" fill="rgb(210,229,1)"/><text x="16.3657%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.14%)</title><rect x="16.8733%" y="181" width="0.1377%" height="15" fill="rgb(222,148,37)"/><text x="17.1233%" y="191.50"></text></g><g><title>libimmixcons`immix_alloc (2 samples, 0.14%)</title><rect x="17.2176%" y="197" width="0.1377%" height="15" fill="rgb(234,67,33)"/><text x="17.4676%" y="207.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (11 samples, 0.76%)</title><rect x="17.3554%" y="197" width="0.7576%" height="15" fill="rgb(247,98,35)"/><text x="17.6054%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="18.8705%" y="181" width="0.1377%" height="15" fill="rgb(247,138,52)"/><text x="19.1205%" y="191.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (16 samples, 1.10%)</title><rect x="18.1129%" y="197" width="1.1019%" height="15" fill="rgb(213,79,30)"/><text x="18.3629%" y="207.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (3 samples, 0.21%)</title><rect x="19.0083%" y="181" width="0.2066%" height="15" fill="rgb(246,177,23)"/><text x="19.2583%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="19.2837%" y="181" width="0.2066%" height="15" fill="rgb(230,62,27)"/><text x="19.5337%" y="191.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (24 samples, 1.65%)</title><rect x="19.4904%" y="181" width="1.6529%" height="15" fill="rgb(216,154,8)"/><text x="19.7404%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="22.2452%" y="165" width="0.2066%" height="15" fill="rgb(244,35,45)"/><text x="22.4952%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (32 samples, 2.20%)</title><rect x="21.1433%" y="181" width="2.2039%" height="15" fill="rgb(251,115,12)"/><text x="21.3933%" y="191.50">l..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (13 samples, 0.90%)</title><rect x="22.4518%" y="165" width="0.8953%" height="15" fill="rgb(240,54,50)"/><text x="22.7018%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.14%)</title><rect x="23.2094%" y="149" width="0.1377%" height="15" fill="rgb(233,84,52)"/><text x="23.4594%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="23.5537%" y="165" width="0.2066%" height="15" fill="rgb(207,117,47)"/><text x="23.8037%" y="175.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (15 samples, 1.03%)</title><rect x="23.7603%" y="165" width="1.0331%" height="15" fill="rgb(249,43,39)"/><text x="24.0103%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.28%)</title><rect x="25.4821%" y="149" width="0.2755%" height="15" fill="rgb(209,38,44)"/><text x="25.7321%" y="159.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (16 samples, 1.10%)</title><rect x="24.7934%" y="165" width="1.1019%" height="15" fill="rgb(236,212,23)"/><text x="25.0434%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (2 samples, 0.14%)</title><rect x="25.7576%" y="149" width="0.1377%" height="15" fill="rgb(242,79,21)"/><text x="26.0076%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.28%)</title><rect x="26.1708%" y="149" width="0.2755%" height="15" fill="rgb(211,96,35)"/><text x="26.4208%" y="159.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (29 samples, 2.00%)</title><rect x="26.4463%" y="149" width="1.9972%" height="15" fill="rgb(253,215,40)"/><text x="26.6963%" y="159.50">l..</text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="29.2700%" y="133" width="0.2066%" height="15" fill="rgb(211,81,21)"/><text x="29.5200%" y="143.50"></text></g><g><title>libimmixcons`libimmixcons::util::locks::mutex::ReentrantMutex::unlock (1 samples, 0.07%)</title><rect x="30.1653%" y="117" width="0.0689%" height="15" fill="rgb(208,190,38)"/><text x="30.4153%" y="127.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (27 samples, 1.86%)</title><rect x="28.4435%" y="149" width="1.8595%" height="15" fill="rgb(235,213,38)"/><text x="28.6935%" y="159.50">l..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (12 samples, 0.83%)</title><rect x="29.4766%" y="133" width="0.8264%" height="15" fill="rgb(237,122,38)"/><text x="29.7266%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.07%)</title><rect x="30.2342%" y="117" width="0.0689%" height="15" fill="rgb(244,218,35)"/><text x="30.4842%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="30.5785%" y="133" width="0.0689%" height="15" fill="rgb(240,68,47)"/><text x="30.8285%" y="143.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (15 samples, 1.03%)</title><rect x="30.6474%" y="133" width="1.0331%" height="15" fill="rgb(210,16,53)"/><text x="30.8974%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.34%)</title><rect x="32.3003%" y="117" width="0.3444%" height="15" fill="rgb(235,124,12)"/><text x="32.5503%" y="127.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (18 samples, 1.24%)</title><rect x="31.6804%" y="133" width="1.2397%" height="15" fill="rgb(224,169,11)"/><text x="31.9304%" y="143.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (4 samples, 0.28%)</title><rect x="32.6446%" y="117" width="0.2755%" height="15" fill="rgb(250,166,2)"/><text x="32.8946%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="33.1267%" y="117" width="0.1377%" height="15" fill="rgb(242,216,29)"/><text x="33.3767%" y="127.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (19 samples, 1.31%)</title><rect x="33.2645%" y="117" width="1.3085%" height="15" fill="rgb(230,116,27)"/><text x="33.5145%" y="127.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="36.0882%" y="101" width="0.1377%" height="15" fill="rgb(228,99,48)"/><text x="36.3382%" y="111.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (35 samples, 2.41%)</title><rect x="34.5730%" y="117" width="2.4105%" height="15" fill="rgb(253,11,6)"/><text x="34.8230%" y="127.50">li..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (11 samples, 0.76%)</title><rect x="36.2259%" y="101" width="0.7576%" height="15" fill="rgb(247,143,39)"/><text x="36.4759%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.34%)</title><rect x="36.9835%" y="101" width="0.3444%" height="15" fill="rgb(236,97,10)"/><text x="37.2335%" y="111.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="37.3278%" y="101" width="0.0689%" height="15" fill="rgb(233,208,19)"/><text x="37.5778%" y="111.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (12 samples, 0.83%)</title><rect x="37.3967%" y="101" width="0.8264%" height="15" fill="rgb(216,164,2)"/><text x="37.6467%" y="111.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (6 samples, 0.41%)</title><rect x="38.2231%" y="101" width="0.4132%" height="15" fill="rgb(220,129,5)"/><text x="38.4731%" y="111.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="38.5675%" y="85" width="0.0689%" height="15" fill="rgb(242,17,10)"/><text x="38.8175%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="38.7741%" y="85" width="0.2066%" height="15" fill="rgb(242,107,0)"/><text x="39.0241%" y="95.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (30 samples, 2.07%)</title><rect x="38.9807%" y="85" width="2.0661%" height="15" fill="rgb(251,28,31)"/><text x="39.2307%" y="95.50">l..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="42.4931%" y="69" width="0.0689%" height="15" fill="rgb(233,223,10)"/><text x="42.7431%" y="79.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (33 samples, 2.27%)</title><rect x="41.0468%" y="85" width="2.2727%" height="15" fill="rgb(215,21,27)"/><text x="41.2968%" y="95.50">l..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (11 samples, 0.76%)</title><rect x="42.5620%" y="69" width="0.7576%" height="15" fill="rgb(232,23,21)"/><text x="42.8120%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.14%)</title><rect x="43.1818%" y="53" width="0.1377%" height="15" fill="rgb(244,5,23)"/><text x="43.4318%" y="63.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="43.3884%" y="69" width="0.1377%" height="15" fill="rgb(226,81,46)"/><text x="43.6384%" y="79.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (12 samples, 0.83%)</title><rect x="43.5262%" y="69" width="0.8264%" height="15" fill="rgb(247,70,30)"/><text x="43.7762%" y="79.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="45.0413%" y="53" width="0.0689%" height="15" fill="rgb(212,68,19)"/><text x="45.2913%" y="63.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (15 samples, 1.03%)</title><rect x="44.3526%" y="69" width="1.0331%" height="15" fill="rgb(240,187,13)"/><text x="44.6026%" y="79.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (4 samples, 0.28%)</title><rect x="45.1102%" y="53" width="0.2755%" height="15" fill="rgb(223,113,26)"/><text x="45.3602%" y="63.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="45.5234%" y="53" width="0.0689%" height="15" fill="rgb(206,192,2)"/><text x="45.7734%" y="63.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (12 samples, 0.83%)</title><rect x="45.5923%" y="53" width="0.8264%" height="15" fill="rgb(241,108,4)"/><text x="45.8423%" y="63.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="48.0028%" y="37" width="0.1377%" height="15" fill="rgb(247,173,49)"/><text x="48.2528%" y="47.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (76 samples, 5.23%)</title><rect x="43.3196%" y="85" width="5.2342%" height="15" fill="rgb(224,114,35)"/><text x="43.5696%" y="95.50">libimm..</text></g><g><title>libimmixcons`libimmixcons::MakeTree (46 samples, 3.17%)</title><rect x="45.3857%" y="69" width="3.1680%" height="15" fill="rgb(245,159,27)"/><text x="45.6357%" y="79.50">lib..</text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (31 samples, 2.13%)</title><rect x="46.4187%" y="53" width="2.1350%" height="15" fill="rgb(245,172,44)"/><text x="46.6687%" y="63.50">l..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (6 samples, 0.41%)</title><rect x="48.1405%" y="37" width="0.4132%" height="15" fill="rgb(236,23,11)"/><text x="48.3905%" y="47.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (145 samples, 9.99%)</title><rect x="38.6364%" y="101" width="9.9862%" height="15" fill="rgb(205,117,38)"/><text x="38.8864%" y="111.50">libimmixcons`l..</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (1 samples, 0.07%)</title><rect x="48.5537%" y="85" width="0.0689%" height="15" fill="rgb(237,72,25)"/><text x="48.8037%" y="95.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (332 samples, 22.87%)</title><rect x="25.8953%" y="165" width="22.8650%" height="15" fill="rgb(244,70,9)"/><text x="26.1453%" y="175.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::MakeTree (268 samples, 18.46%)</title><rect x="30.3030%" y="149" width="18.4573%" height="15" fill="rgb(217,125,39)"/><text x="30.5530%" y="159.50">libimmixcons`libimmixcons::Ma..</text></g><g><title>libimmixcons`libimmixcons::MakeTree (230 samples, 15.84%)</title><rect x="32.9201%" y="133" width="15.8402%" height="15" fill="rgb(235,36,10)"/><text x="33.1701%" y="143.50">libimmixcons`libimmixcon..</text></g><g><title>libimmixcons`libimmixcons::MakeTree (171 samples, 11.78%)</title><rect x="36.9835%" y="117" width="11.7769%" height="15" fill="rgb(251,123,47)"/><text x="37.2335%" y="127.50">libimmixcons`libi..</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (2 samples, 0.14%)</title><rect x="48.6226%" y="101" width="0.1377%" height="15" fill="rgb(221,13,13)"/><text x="48.8726%" y="111.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (1 samples, 0.07%)</title><rect x="48.7603%" y="165" width="0.0689%" height="15" fill="rgb(238,131,9)"/><text x="49.0103%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (371 samples, 25.55%)</title><rect x="23.3471%" y="181" width="25.5510%" height="15" fill="rgb(211,50,8)"/><text x="23.5971%" y="191.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (1 samples, 0.07%)</title><rect x="48.8292%" y="165" width="0.0689%" height="15" fill="rgb(245,182,24)"/><text x="49.0792%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (433 samples, 29.82%)</title><rect x="19.2149%" y="197" width="29.8209%" height="15" fill="rgb(242,14,37)"/><text x="19.4649%" y="207.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (2 samples, 0.14%)</title><rect x="48.8981%" y="181" width="0.1377%" height="15" fill="rgb(246,228,12)"/><text x="49.1481%" y="191.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (558 samples, 38.43%)</title><rect x="10.6749%" y="245" width="38.4298%" height="15" fill="rgb(213,55,15)"/><text x="10.9249%" y="255.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::MakeTree (520 samples, 35.81%)</title><rect x="13.2920%" y="229" width="35.8127%" height="15" fill="rgb(209,9,3)"/><text x="13.5420%" y="239.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::MakeTree (466 samples, 32.09%)</title><rect x="17.0110%" y="213" width="32.0937%" height="15" fill="rgb(230,59,30)"/><text x="17.2610%" y="223.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (1 samples, 0.07%)</title><rect x="49.0358%" y="197" width="0.0689%" height="15" fill="rgb(209,121,21)"/><text x="49.2858%" y="207.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (630 samples, 43.39%)</title><rect x="5.7851%" y="261" width="43.3884%" height="15" fill="rgb(220,109,13)"/><text x="6.0351%" y="271.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (1 samples, 0.07%)</title><rect x="49.1047%" y="245" width="0.0689%" height="15" fill="rgb(232,18,1)"/><text x="49.3547%" y="255.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (667 samples, 45.94%)</title><rect x="3.3058%" y="277" width="45.9366%" height="15" fill="rgb(215,41,42)"/><text x="3.5558%" y="287.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (1 samples, 0.07%)</title><rect x="49.1736%" y="261" width="0.0689%" height="15" fill="rgb(224,123,36)"/><text x="49.4236%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::MakeTree (698 samples, 48.07%)</title><rect x="1.2397%" y="325" width="48.0716%" height="15" fill="rgb(240,125,3)"/><text x="1.4897%" y="335.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::MakeTree (695 samples, 47.87%)</title><rect x="1.4463%" y="309" width="47.8650%" height="15" fill="rgb(205,98,50)"/><text x="1.6963%" y="319.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::MakeTree (687 samples, 47.31%)</title><rect x="1.9972%" y="293" width="47.3140%" height="15" fill="rgb(205,185,37)"/><text x="2.2472%" y="303.50">libimmixcons`libimmixcons::MakeTree</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (1 samples, 0.07%)</title><rect x="49.2424%" y="277" width="0.0689%" height="15" fill="rgb(238,207,15)"/><text x="49.4924%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="49.5868%" y="309" width="0.0689%" height="15" fill="rgb(213,199,42)"/><text x="49.8368%" y="319.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="49.6556%" y="309" width="0.0689%" height="15" fill="rgb(235,201,11)"/><text x="49.9056%" y="319.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (8 samples, 0.55%)</title><rect x="49.7245%" y="309" width="0.5510%" height="15" fill="rgb(207,46,11)"/><text x="49.9745%" y="319.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (20 samples, 1.38%)</title><rect x="50.2755%" y="309" width="1.3774%" height="15" fill="rgb(241,35,35)"/><text x="50.5255%" y="319.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (8 samples, 0.55%)</title><rect x="51.1019%" y="293" width="0.5510%" height="15" fill="rgb(243,32,47)"/><text x="51.3519%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.07%)</title><rect x="51.5840%" y="277" width="0.0689%" height="15" fill="rgb(247,202,23)"/><text x="51.8340%" y="287.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.48%)</title><rect x="51.7218%" y="293" width="0.4821%" height="15" fill="rgb(219,102,11)"/><text x="51.9718%" y="303.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (17 samples, 1.17%)</title><rect x="52.2039%" y="293" width="1.1708%" height="15" fill="rgb(243,110,44)"/><text x="52.4539%" y="303.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="55.5096%" y="277" width="0.2066%" height="15" fill="rgb(222,74,54)"/><text x="55.7596%" y="287.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (51 samples, 3.51%)</title><rect x="53.3747%" y="293" width="3.5124%" height="15" fill="rgb(216,99,12)"/><text x="53.6247%" y="303.50">lib..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (17 samples, 1.17%)</title><rect x="55.7163%" y="277" width="1.1708%" height="15" fill="rgb(226,22,26)"/><text x="55.9663%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.07%)</title><rect x="56.8182%" y="261" width="0.0689%" height="15" fill="rgb(217,163,10)"/><text x="57.0682%" y="271.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.41%)</title><rect x="57.0937%" y="277" width="0.4132%" height="15" fill="rgb(213,25,53)"/><text x="57.3437%" y="287.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (34 samples, 2.34%)</title><rect x="57.5069%" y="277" width="2.3416%" height="15" fill="rgb(252,105,26)"/><text x="57.7569%" y="287.50">l..</text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.48%)</title><rect x="61.9146%" y="261" width="0.4821%" height="15" fill="rgb(220,39,43)"/><text x="62.1646%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::block_allocator::BlockAllocator::get_block (1 samples, 0.07%)</title><rect x="63.2920%" y="245" width="0.0689%" height="15" fill="rgb(229,68,48)"/><text x="63.5420%" y="255.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (52 samples, 3.58%)</title><rect x="59.8485%" y="277" width="3.5813%" height="15" fill="rgb(252,8,32)"/><text x="60.0985%" y="287.50">libi..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (15 samples, 1.03%)</title><rect x="62.3967%" y="261" width="1.0331%" height="15" fill="rgb(223,20,43)"/><text x="62.6467%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::util::locks::mutex::ReentrantMutex::unlock (1 samples, 0.07%)</title><rect x="63.3609%" y="245" width="0.0689%" height="15" fill="rgb(229,81,49)"/><text x="63.6109%" y="255.50"></text></g><g><title>libimmixcons`atomic::fallback::SpinLock::lock (1 samples, 0.07%)</title><rect x="63.3609%" y="229" width="0.0689%" height="15" fill="rgb(236,28,36)"/><text x="63.6109%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.28%)</title><rect x="64.0496%" y="261" width="0.2755%" height="15" fill="rgb(249,185,26)"/><text x="64.2996%" y="271.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="64.3251%" y="261" width="0.0689%" height="15" fill="rgb(249,174,33)"/><text x="64.5751%" y="271.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (38 samples, 2.62%)</title><rect x="64.3939%" y="261" width="2.6171%" height="15" fill="rgb(233,201,37)"/><text x="64.6439%" y="271.50">li..</text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="68.8017%" y="245" width="0.2066%" height="15" fill="rgb(221,78,26)"/><text x="69.0517%" y="255.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (39 samples, 2.69%)</title><rect x="67.0110%" y="261" width="2.6860%" height="15" fill="rgb(250,127,30)"/><text x="67.2610%" y="271.50">li..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (10 samples, 0.69%)</title><rect x="69.0083%" y="245" width="0.6887%" height="15" fill="rgb(230,49,44)"/><text x="69.2583%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.07%)</title><rect x="69.6281%" y="229" width="0.0689%" height="15" fill="rgb(229,67,23)"/><text x="69.8781%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="70.1102%" y="245" width="0.2066%" height="15" fill="rgb(249,83,47)"/><text x="70.3602%" y="255.50"></text></g><g><title>libimmixcons`immix_alloc (2 samples, 0.14%)</title><rect x="70.3168%" y="245" width="0.1377%" height="15" fill="rgb(215,43,3)"/><text x="70.5668%" y="255.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (34 samples, 2.34%)</title><rect x="70.4545%" y="245" width="2.3416%" height="15" fill="rgb(238,154,13)"/><text x="70.7045%" y="255.50">l..</text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="74.6556%" y="229" width="0.1377%" height="15" fill="rgb(219,56,2)"/><text x="74.9056%" y="239.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (44 samples, 3.03%)</title><rect x="72.7961%" y="245" width="3.0303%" height="15" fill="rgb(233,0,4)"/><text x="73.0461%" y="255.50">lib..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (15 samples, 1.03%)</title><rect x="74.7934%" y="229" width="1.0331%" height="15" fill="rgb(235,30,7)"/><text x="75.0434%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.28%)</title><rect x="75.5510%" y="213" width="0.2755%" height="15" fill="rgb(250,79,13)"/><text x="75.8010%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.34%)</title><rect x="76.3774%" y="229" width="0.3444%" height="15" fill="rgb(211,146,34)"/><text x="76.6274%" y="239.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (30 samples, 2.07%)</title><rect x="76.7218%" y="229" width="2.0661%" height="15" fill="rgb(228,22,38)"/><text x="76.9718%" y="239.50">l..</text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="80.7851%" y="213" width="0.1377%" height="15" fill="rgb(235,168,5)"/><text x="81.0351%" y="223.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (43 samples, 2.96%)</title><rect x="78.7879%" y="229" width="2.9614%" height="15" fill="rgb(221,155,16)"/><text x="79.0379%" y="239.50">lib..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (12 samples, 0.83%)</title><rect x="80.9229%" y="213" width="0.8264%" height="15" fill="rgb(215,215,53)"/><text x="81.1729%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.07%)</title><rect x="81.6804%" y="197" width="0.0689%" height="15" fill="rgb(223,4,10)"/><text x="81.9304%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (7 samples, 0.48%)</title><rect x="82.0937%" y="213" width="0.4821%" height="15" fill="rgb(234,103,6)"/><text x="82.3437%" y="223.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="82.5758%" y="213" width="0.0689%" height="15" fill="rgb(227,97,0)"/><text x="82.8258%" y="223.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (33 samples, 2.27%)</title><rect x="82.6446%" y="213" width="2.2727%" height="15" fill="rgb(234,150,53)"/><text x="82.8946%" y="223.50">l..</text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="86.6391%" y="197" width="0.0689%" height="15" fill="rgb(228,201,54)"/><text x="86.8891%" y="207.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (39 samples, 2.69%)</title><rect x="84.9174%" y="213" width="2.6860%" height="15" fill="rgb(222,22,37)"/><text x="85.1674%" y="223.50">li..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (13 samples, 0.90%)</title><rect x="86.7080%" y="197" width="0.8953%" height="15" fill="rgb(237,53,32)"/><text x="86.9580%" y="207.50"></text></g><g><title>libimmixcons`&lt;libimmixcons::allocation::NormalAllocator as libimmixcons::allocation::Allocator&gt;::handle_no_hole (1 samples, 0.07%)</title><rect x="87.5344%" y="181" width="0.0689%" height="15" fill="rgb(233,25,53)"/><text x="87.7844%" y="191.50"></text></g><g><title>libimmixcons`libimmixcons::util::locks::mutex::ReentrantMutex::unlock (1 samples, 0.07%)</title><rect x="87.5344%" y="165" width="0.0689%" height="15" fill="rgb(210,40,34)"/><text x="87.7844%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.34%)</title><rect x="87.8788%" y="197" width="0.3444%" height="15" fill="rgb(241,220,44)"/><text x="88.1288%" y="207.50"></text></g><g><title>libimmixcons`immix_alloc (1 samples, 0.07%)</title><rect x="88.2231%" y="197" width="0.0689%" height="15" fill="rgb(235,28,35)"/><text x="88.4731%" y="207.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (18 samples, 1.24%)</title><rect x="88.2920%" y="197" width="1.2397%" height="15" fill="rgb(210,56,17)"/><text x="88.5420%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="90.8402%" y="181" width="0.2066%" height="15" fill="rgb(224,130,29)"/><text x="91.0902%" y="191.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (31 samples, 2.13%)</title><rect x="89.5317%" y="197" width="2.1350%" height="15" fill="rgb(235,212,8)"/><text x="89.7817%" y="207.50">l..</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (9 samples, 0.62%)</title><rect x="91.0468%" y="181" width="0.6198%" height="15" fill="rgb(223,33,50)"/><text x="91.2968%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.21%)</title><rect x="91.8044%" y="181" width="0.2066%" height="15" fill="rgb(219,149,13)"/><text x="92.0544%" y="191.50"></text></g><g><title>libimmixcons`immix_alloc (4 samples, 0.28%)</title><rect x="92.0110%" y="181" width="0.2755%" height="15" fill="rgb(250,156,29)"/><text x="92.2610%" y="191.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (12 samples, 0.83%)</title><rect x="92.2865%" y="181" width="0.8264%" height="15" fill="rgb(216,193,19)"/><text x="92.5365%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.14%)</title><rect x="94.0083%" y="165" width="0.1377%" height="15" fill="rgb(216,135,14)"/><text x="94.2583%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (23 samples, 1.58%)</title><rect x="93.1129%" y="181" width="1.5840%" height="15" fill="rgb(241,47,5)"/><text x="93.3629%" y="191.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (8 samples, 0.55%)</title><rect x="94.1460%" y="165" width="0.5510%" height="15" fill="rgb(233,42,35)"/><text x="94.3960%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="94.9036%" y="165" width="0.0689%" height="15" fill="rgb(231,13,6)"/><text x="95.1536%" y="175.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (9 samples, 0.62%)</title><rect x="94.9725%" y="165" width="0.6198%" height="15" fill="rgb(207,181,40)"/><text x="95.2225%" y="175.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="96.1433%" y="149" width="0.0689%" height="15" fill="rgb(254,173,49)"/><text x="96.3933%" y="159.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (11 samples, 0.76%)</title><rect x="95.5923%" y="165" width="0.7576%" height="15" fill="rgb(221,1,38)"/><text x="95.8423%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (2 samples, 0.14%)</title><rect x="96.2121%" y="149" width="0.1377%" height="15" fill="rgb(206,124,46)"/><text x="96.4621%" y="159.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (5 samples, 0.34%)</title><rect x="96.3499%" y="149" width="0.3444%" height="15" fill="rgb(249,21,11)"/><text x="96.5999%" y="159.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (5 samples, 0.34%)</title><rect x="96.6942%" y="149" width="0.3444%" height="15" fill="rgb(222,201,40)"/><text x="96.9442%" y="159.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (3 samples, 0.21%)</title><rect x="96.8320%" y="133" width="0.2066%" height="15" fill="rgb(235,61,29)"/><text x="97.0820%" y="143.50"></text></g><g><title>libimmixcons`immix_mutator_yieldpoint (2 samples, 0.14%)</title><rect x="97.0386%" y="133" width="0.1377%" height="15" fill="rgb(219,207,3)"/><text x="97.2886%" y="143.50"></text></g><g><title>libimmixcons`libimmixcons::Immix::allocate (3 samples, 0.21%)</title><rect x="97.1763%" y="133" width="0.2066%" height="15" fill="rgb(222,56,46)"/><text x="97.4263%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.07%)</title><rect x="97.3140%" y="117" width="0.0689%" height="15" fill="rgb(239,76,54)"/><text x="97.5640%" y="127.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (40 samples, 2.75%)</title><rect x="94.6970%" y="181" width="2.7548%" height="15" fill="rgb(231,124,27)"/><text x="94.9470%" y="191.50">li..</text></g><g><title>libimmixcons`libimmixcons::Populate (16 samples, 1.10%)</title><rect x="96.3499%" y="165" width="1.1019%" height="15" fill="rgb(249,195,6)"/><text x="96.5999%" y="175.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (6 samples, 0.41%)</title><rect x="97.0386%" y="149" width="0.4132%" height="15" fill="rgb(237,174,47)"/><text x="97.2886%" y="159.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (1 samples, 0.07%)</title><rect x="97.3829%" y="133" width="0.0689%" height="15" fill="rgb(206,201,31)"/><text x="97.6329%" y="143.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (88 samples, 6.06%)</title><rect x="91.6667%" y="197" width="6.0606%" height="15" fill="rgb(231,57,52)"/><text x="91.9167%" y="207.50">libimmix..</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (4 samples, 0.28%)</title><rect x="97.4518%" y="181" width="0.2755%" height="15" fill="rgb(248,177,22)"/><text x="97.7018%" y="191.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (150 samples, 10.33%)</title><rect x="87.6033%" y="213" width="10.3306%" height="15" fill="rgb(215,211,37)"/><text x="87.8533%" y="223.50">libimmixcons`li..</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (3 samples, 0.21%)</title><rect x="97.7273%" y="197" width="0.2066%" height="15" fill="rgb(241,128,51)"/><text x="97.9773%" y="207.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (238 samples, 16.39%)</title><rect x="81.7493%" y="229" width="16.3912%" height="15" fill="rgb(227,165,31)"/><text x="81.9993%" y="239.50">libimmixcons`libimmixcons..</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (3 samples, 0.21%)</title><rect x="97.9339%" y="213" width="0.2066%" height="15" fill="rgb(228,167,24)"/><text x="98.1839%" y="223.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (325 samples, 22.38%)</title><rect x="75.8264%" y="245" width="22.3829%" height="15" fill="rgb(228,143,12)"/><text x="76.0764%" y="255.50">libimmixcons`libimmixcons::Populate</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (1 samples, 0.07%)</title><rect x="98.1405%" y="229" width="0.0689%" height="15" fill="rgb(249,149,8)"/><text x="98.3905%" y="239.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (419 samples, 28.86%)</title><rect x="69.6970%" y="261" width="28.8567%" height="15" fill="rgb(243,35,44)"/><text x="69.9470%" y="271.50">libimmixcons`libimmixcons::Populate</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (5 samples, 0.34%)</title><rect x="98.2094%" y="245" width="0.3444%" height="15" fill="rgb(246,89,9)"/><text x="98.4594%" y="255.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (2 samples, 0.14%)</title><rect x="98.5537%" y="261" width="0.1377%" height="15" fill="rgb(233,213,13)"/><text x="98.8037%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (520 samples, 35.81%)</title><rect x="63.4298%" y="277" width="35.8127%" height="15" fill="rgb(233,141,41)"/><text x="63.6798%" y="287.50">libimmixcons`libimmixcons::Populate</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (8 samples, 0.55%)</title><rect x="98.6915%" y="261" width="0.5510%" height="15" fill="rgb(239,167,4)"/><text x="98.9415%" y="271.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (618 samples, 42.56%)</title><rect x="56.8871%" y="293" width="42.5620%" height="15" fill="rgb(209,217,16)"/><text x="57.1371%" y="303.50">libimmixcons`libimmixcons::Populate</text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (3 samples, 0.21%)</title><rect x="99.2424%" y="277" width="0.2066%" height="15" fill="rgb(219,88,35)"/><text x="99.4924%" y="287.50"></text></g><g><title>libimmixcons`libimmixcons::allocation::ImmixSpace::allocate (1 samples, 0.07%)</title><rect x="99.4490%" y="293" width="0.0689%" height="15" fill="rgb(220,193,23)"/><text x="99.6990%" y="303.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (698 samples, 48.07%)</title><rect x="51.6529%" y="309" width="48.0716%" height="15" fill="rgb(230,90,52)"/><text x="51.9029%" y="319.50">libimmixcons`libimmixcons::Populate</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (3 samples, 0.21%)</title><rect x="99.5179%" y="293" width="0.2066%" height="15" fill="rgb(252,106,19)"/><text x="99.7679%" y="303.50"></text></g><g><title>libimmixcons`libimmixcons::Populate (733 samples, 50.48%)</title><rect x="49.3113%" y="325" width="50.4821%" height="15" fill="rgb(206,74,20)"/><text x="49.5613%" y="335.50">libimmixcons`libimmixcons::Populate</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (1 samples, 0.07%)</title><rect x="99.7245%" y="309" width="0.0689%" height="15" fill="rgb(230,138,44)"/><text x="99.9745%" y="319.50"></text></g><g><title>libimmixcons`main (1,450 samples, 99.86%)</title><rect x="0.0000%" y="437" width="99.8623%" height="15" fill="rgb(235,182,43)"/><text x="0.2500%" y="447.50">libimmixcons`main</text></g><g><title>libimmixcons`std::rt::lang_start_internal (1,450 samples, 99.86%)</title><rect x="0.0000%" y="421" width="99.8623%" height="15" fill="rgb(242,16,51)"/><text x="0.2500%" y="431.50">libimmixcons`std::rt::lang_start_internal</text></g><g><title>libimmixcons`std::rt::lang_start::_{{closure}} (1,450 samples, 99.86%)</title><rect x="0.0000%" y="405" width="99.8623%" height="15" fill="rgb(248,9,4)"/><text x="0.2500%" y="415.50">libimmixcons`std::rt::lang_start::_{{closure}}</text></g><g><title>libimmixcons`std::sys_common::backtrace::__rust_begin_short_backtrace (1,450 samples, 99.86%)</title><rect x="0.0000%" y="389" width="99.8623%" height="15" fill="rgb(210,31,22)"/><text x="0.2500%" y="399.50">libimmixcons`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libimmixcons`libimmixcons::main (1,450 samples, 99.86%)</title><rect x="0.0000%" y="373" width="99.8623%" height="15" fill="rgb(239,54,39)"/><text x="0.2500%" y="383.50">libimmixcons`libimmixcons::main</text></g><g><title>libimmixcons`libimmixcons::gcbench (1,450 samples, 99.86%)</title><rect x="0.0000%" y="357" width="99.8623%" height="15" fill="rgb(230,99,41)"/><text x="0.2500%" y="367.50">libimmixcons`libimmixcons::gcbench</text></g><g><title>libimmixcons`libimmixcons::TimeConstruction (1,437 samples, 98.97%)</title><rect x="0.8953%" y="341" width="98.9669%" height="15" fill="rgb(253,106,12)"/><text x="1.1453%" y="351.50">libimmixcons`libimmixcons::TimeConstruction</text></g><g><title>libimmixcons`libimmixcons::object::RawGc::data (1 samples, 0.07%)</title><rect x="99.7934%" y="325" width="0.0689%" height="15" fill="rgb(213,46,41)"/><text x="100.0434%" y="335.50"></text></g><g><title>libdyld.dylib`start (1,451 samples, 99.93%)</title><rect x="0.0000%" y="453" width="99.9311%" height="15" fill="rgb(215,133,35)"/><text x="0.2500%" y="463.50">libdyld.dylib`start</text></g><g><title>libsystem_c.dylib`exit (1 samples, 0.07%)</title><rect x="99.8623%" y="437" width="0.0689%" height="15" fill="rgb(213,28,5)"/><text x="100.1123%" y="447.50"></text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (1 samples, 0.07%)</title><rect x="99.8623%" y="421" width="0.0689%" height="15" fill="rgb(215,77,49)"/><text x="100.1123%" y="431.50"></text></g><g><title>libc++.1.dylib`std::__1::ios_base::Init::~Init (1 samples, 0.07%)</title><rect x="99.8623%" y="405" width="0.0689%" height="15" fill="rgb(248,100,22)"/><text x="100.1123%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_ostream&lt;wchar_t, std::__1::char_traits&lt;wchar_t&gt; &gt;::flush (1 samples, 0.07%)</title><rect x="99.8623%" y="389" width="0.0689%" height="15" fill="rgb(208,67,9)"/><text x="100.1123%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::__stdoutbuf&lt;wchar_t&gt;::sync (1 samples, 0.07%)</title><rect x="99.8623%" y="373" width="0.0689%" height="15" fill="rgb(219,133,21)"/><text x="100.1123%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::codecvt&lt;wchar_t, char, __mbstate_t&gt;::do_unshift (1 samples, 0.07%)</title><rect x="99.8623%" y="357" width="0.0689%" height="15" fill="rgb(246,46,29)"/><text x="100.1123%" y="367.50"></text></g><g><title>libsystem_c.dylib`wcrtomb_l (1 samples, 0.07%)</title><rect x="99.8623%" y="341" width="0.0689%" height="15" fill="rgb(246,185,52)"/><text x="100.1123%" y="351.50"></text></g><g><title>all (1,452 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(252,136,11)"/><text x="0.2500%" y="495.50"></text></g><g><title>libimmixcons`0x1 (1,452 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(219,138,53)"/><text x="0.2500%" y="479.50">libimmixcons`0x1</text></g><g><title>libimmixcons`main (1 samples, 0.07%)</title><rect x="99.9311%" y="453" width="0.0689%" height="15" fill="rgb(211,51,23)"/><text x="100.1811%" y="463.50"></text></g></svg></svg>